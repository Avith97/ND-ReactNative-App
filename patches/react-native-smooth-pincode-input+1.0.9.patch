diff --git a/node_modules/react-native-smooth-pincode-input/src/index.js b/node_modules/react-native-smooth-pincode-input/src/index.js
index 0a00f22..177d090 100644
--- a/node_modules/react-native-smooth-pincode-input/src/index.js
+++ b/node_modules/react-native-smooth-pincode-input/src/index.js
@@ -6,8 +6,9 @@ import {
   TextInput,
   StyleSheet,
   I18nManager,
-  ViewPropTypes,
+  // ViewPropTypes,
 } from 'react-native';
+import ViewPropTypes from 'deprecated-react-native-prop-types';
 import * as Animatable from 'react-native-animatable';
 
 const styles = StyleSheet.create({
@@ -31,9 +32,13 @@ const styles = StyleSheet.create({
 
 class SmoothPinCodeInput extends Component {
 
+  constructor(props) {
+    super(props);
+  }
   state = {
     maskDelay: false,
     focused: false,
+    value: null
   };
   ref = React.createRef();
   inputRef = React.createRef();
@@ -45,7 +50,7 @@ class SmoothPinCodeInput extends Component {
     return this.ref.current[animation](duration);
   };
 
-  shake = () => this.animate({animation: "shake"});
+  shake = () => this.animate({ animation: "shake" });
 
   focus = () => {
     return this.inputRef.current.focus();
@@ -81,8 +86,8 @@ class SmoothPinCodeInput extends Component {
     if (maskDelay) { // mask password after delay
       clearTimeout(this.maskTimeout);
       this.maskTimeout = setTimeout(() => {
-          this.setState({ maskDelay: false });
-        },
+        this.setState({ maskDelay: false });
+      },
         this.props.maskDelay
       );
     }
@@ -136,6 +141,7 @@ class SmoothPinCodeInput extends Component {
       editable,
       inputProps,
       disableFullscreenUI,
+      key
     } = this.props;
     const { maskDelay, focused } = this.state;
     return (
@@ -150,7 +156,7 @@ class SmoothPinCodeInput extends Component {
         ]}>
         <View style={{
           position: 'absolute', margin: 0, height: '100%',
-          flexDirection: I18nManager.isRTL ? 'row-reverse': 'row',
+          flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',
           alignItems: 'center',
         }}>
           {
@@ -167,7 +173,7 @@ class SmoothPinCodeInput extends Component {
               if (filled || placeholder !== null) {
                 if (showMask && isMaskText) {
                   cellText = mask;
-                } else if(!filled && isPlaceholderText) {
+                } else if (!filled && isPlaceholderText) {
                   cellText = placeholder;
                 } else if (pinCodeChar) {
                   cellText = pinCodeChar;
@@ -180,7 +186,7 @@ class SmoothPinCodeInput extends Component {
 
               return (
                 <Animatable.View
-                  key={idx}
+                  key={cellText}
                   style={[
                     {
                       width: cellSize,
@@ -208,6 +214,8 @@ class SmoothPinCodeInput extends Component {
                 </Animatable.View>
               );
             })
+
+
           }
         </View>
         <TextInput
@@ -286,14 +294,14 @@ SmoothPinCodeInput.propTypes = {
 
   restrictToNumbers: PropTypes.bool,
 
-  containerStyle: ViewPropTypes.style,
+  containerStyle: ViewPropTypes.ViewPropTypes.style,
 
-  cellStyle: ViewPropTypes.style,
-  cellStyleFocused: ViewPropTypes.style,
-  cellStyleFilled: ViewPropTypes.style,
+  cellStyle: ViewPropTypes.ViewPropTypes.style,
+  cellStyleFocused: ViewPropTypes.ViewPropTypes.style,
+  cellStyleFilled: ViewPropTypes.ViewPropTypes.style,
 
-  textStyle: Text.propTypes.style,
-  textStyleFocused: Text.propTypes.style,
+  textStyle: ViewPropTypes.TextPropTypes.style,
+  textStyleFocused: ViewPropTypes.TextPropTypes.style,
 
   animated: PropTypes.bool,
   animationFocused: PropTypes.oneOfType([
